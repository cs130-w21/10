[{"/Users/macbookair/cs130/src/index.js":"1","/Users/macbookair/cs130/src/App.js":"2","/Users/macbookair/cs130/src/reportWebVitals.js":"3","/Users/macbookair/cs130/src/components/Login/index.js":"4","/Users/macbookair/cs130/src/components/Login/Login.js":"5","/Users/macbookair/cs130/src/services/firebase.js":"6","/Users/macbookair/cs130/src/components/ProfileCards/ProfileCards.js":"7"},{"size":500,"mtime":1612481706238,"results":"8","hashOfConfig":"9"},{"size":906,"mtime":1612503485817,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612481706238,"results":"11","hashOfConfig":"9"},{"size":52,"mtime":1612481706236,"results":"12","hashOfConfig":"9"},{"size":352,"mtime":1612481706232,"results":"13","hashOfConfig":"9"},{"size":2814,"mtime":1612502616090,"results":"14","hashOfConfig":"9"},{"size":2075,"mtime":1612503211215,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"iohr7n",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/macbookair/cs130/src/index.js",[],["32","33"],"/Users/macbookair/cs130/src/App.js",["34"],"/Users/macbookair/cs130/src/reportWebVitals.js",[],"/Users/macbookair/cs130/src/components/Login/index.js",[],"/Users/macbookair/cs130/src/components/Login/Login.js",[],"/Users/macbookair/cs130/src/services/firebase.js",[],"/Users/macbookair/cs130/src/components/ProfileCards/ProfileCards.js",["35","36","37"],"import React, { useEffect, useState } from \"react\";\nimport TinderCard, { displayName } from \"react-tinder-card\";\nimport { db } from \"../../services/firebase\";\nimport \"./ProfileCards.css\";\nimport firebase from \"firebase\";\n\nfunction ProfileCards({ user }) {\n  user = \"kjhkf\";\n  // your array is useState\n  // useState is a Hook that allows you to have state variables in functional components\n  // setPeople to modifiy\n  const [people, setPeople] = useState([]);\n\n  db.collection(\"people\").doc(\"rando\").set({\n    name: \"rando\",\n    url:\n      \"https://i.pinimg.com/originals/ee/e7/5d/eee75d6e875e7e205a1394aaa96fad12.png\",\n  });\n  // code that runs based on a condition\n  useEffect(() => {\n    // where the code runs\n\n    const unsubscribe = db\n      .collection(\"people\")\n      .onSnapshot((snapshot) =>\n        setPeople(snapshot.docs.map((doc) => doc.data()))\n      );\n\n    return () => {\n      // cleanup\n      unsubscribe();\n    };\n\n    //this will run once when component loads and never again\n  }, []);\n\n  const onSwipe = (direction, key) => {\n    if (direction == \"left\") {\n      db.collection(\"people\")\n        .doc(user)\n        .update(\"dontSwipe\", firebase.firestore.FieldValue.arrayUnion(key));\n    }\n\n    if (direction == \"right\") {\n      db.collection(\"people\")\n        .doc(user)\n        .update(\"likes\", firebase.firestore.FieldValue.arrayUnion(key));\n      db.collection(\"people\")\n        .doc(key)\n        .update(\"likedBy\", firebase.firestore.FieldValue.arrayUnion(user));\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"profileCards__cardContainer\">\n        {people.map((person) => (\n          <TinderCard\n            className=\"swipe\"\n            key={person.key}\n            onSwipe={(d) => onSwipe(d, person.key)}\n            preventSwipe={[\"up\", \"down\"]}\n          >\n            <div\n              style={{ backgroundImage: `url(${person.url})` }}\n              className=\"card\"\n            >\n              <h3>{person.name}</h3>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n    </div>\n  );\n}\nexport default ProfileCards;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":18},{"ruleId":"42","severity":1,"message":"46","line":2,"column":22,"nodeType":"44","messageId":"45","endLine":2,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":38,"column":19,"nodeType":"49","messageId":"50","endLine":38,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":44,"column":19,"nodeType":"49","messageId":"50","endLine":44,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Profiler' is defined but never used.","Identifier","unusedVar","'displayName' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]